apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: libs.plugins.ktlint.get().pluginId

ext {
    language = project.parent.name
    source = project.name
}

android {
    namespace = "com.jramberger.mysteries.extension"
    sourceSets {
        main {
            manifest.srcFile "AndroidManifest.xml"
            java.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }
    }

    compileSdk = 34

    defaultConfig {
        minSdk = 21
        consumerProguardFiles("consumer-rules.pro")

        versionCode sourceVersionCode
        versionName "1.0.$versionCode"

        applicationIdSuffix language + "." + source

        base {
            archivesName = "mysteries-ext-$language-$source-$versionName"
        }

        assert sourceClass.startsWith(".")

        manifestPlaceholders = [
            appName : "Mysteries Source - $sourceName",
            extClass: sourceClass,
        ]
    }

    signingConfigs {
        release {
            storeFile rootProject.file("signingkey.jks")
            storePassword System.getenv("KEY_STORE_PASSWORD")
            keyAlias System.getenv("ALIAS")
            keyPassword System.getenv("KEY_PASSWORD")
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            vcsInfo.include false
            proguardFiles(
                getDefaultProguardFile("proguard-android-optimize.txt"),
                "proguard-rules.pro"
            )
        }
    }

    dependenciesInfo {
        includeInApk = false
    }

    buildFeatures {
        buildConfig true
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
}

dependencies {
    implementation(project(":base"))
    compileOnly(libs.bundles.all)
}

tasks.register("writeManifestFile") {
    doLast {
        def manifest = android.sourceSets.getByName("main").manifest
        if (!manifest.srcFile.exists()) {
            File tempFile = layout.buildDirectory.get().file("tempAndroidManifest.xml").getAsFile()
            if (!tempFile.exists()) {
                tempFile.withWriter {
                    it.write('<?xml version="1.0" encoding="utf-8"?>\n<manifest />\n')
                }
            }
            manifest.srcFile(tempFile.path)
        }
    }
}

preBuild.dependsOn(writeManifestFile)
